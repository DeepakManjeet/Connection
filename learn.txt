upload another user code to bitbucket:
1. create a new folder and git clone from master branch
2. Create a new branch in Jira project
3. use git fetch --all and git checkout <new_branch_name> in that newly created folder
4. copy and paste with replace those 6 folders from another user WS to this newly created folder
5. use command git status to check the staus of files
6. open VS code in that new folder using code. in git bash and compare all files side by side
7. after resolving all conflicts, again check git status, all files should be green
8. git commit -m"ticket_name"
9. git push
10. Raise merge request in bitbucket

                        index = Array.FindIndex(aFullMessage, line => line.Contains("<scb:payloadFormat>"));


^\s*\w+\s+\w+\s*=\s*(?:"[^"]*"|'[^']*'|-?\d+(?:\.\d+)?|(?:true|false)).*//

# Update-DocTables.ps1
# --------------------
# Loops through all .docx in a folder,
# opens each in Word via COM, writes
# "Environment: PDC8WACBASPCV61" into
# the first table’s cell(1,2), then saves.

param(
    [string]$FolderPath = "C:\Path\To\Your\Docs",
    [string]$EnvText     = "Environment: PDC8WACBASPCV61"
)

# Create Word COM object
$word = New-Object -ComObject Word.Application
$word.Visible = $false
$word.DisplayAlerts = 0  # wdAlertsNone

try {
    Get-ChildItem -Path $FolderPath -Filter *.docx | ForEach-Object {
        $fullName = $_.FullName
        Write-Host "▶ Processing $($_.Name)" -ForegroundColor Cyan

        # Open document (ReadOnly = $false, Visible = $false)
        $doc = $word.Documents.Open($fullName, [ref]$false, [ref]$false, [ref]$false)

        if ($doc.Tables.Count -ge 1) {
            $tbl  = $doc.Tables.Item(1)      # first table
            $cell = $tbl.Cell(1, 2)         # row=1, col=2
            $cell.Range.Text = $EnvText     # overwrite text
            $doc.Save()
            Write-Host "  ✓ Updated table in $($_.Name)" -ForegroundColor Green
        }
        else {
            Write-Host "  ⚠ No tables found in $($_.Name)" -ForegroundColor Yellow
        }

        $doc.Close()
    }
}
finally {
    $word.Quit()
    [System.Runtime.Interopservices.Marshal]::ReleaseComObject($word) | Out-Null
    Write-Host "`nAll done." -ForegroundColor Magenta
}

