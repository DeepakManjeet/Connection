using GTS_CORE.CoreLibs.ExecutionHelper;
using GTS_OSAF.CoreLibs;
using Spring.Aop.Framework;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;

namespace GTS_OSAF.Config
{

    public enum ApplicationLevel
    {
        Application,Page,
        TestFixture,Invalid,
        Native
    }
[DebuggerStepThrough]
    public class ClassRegister
    {
        static Dictionary<Type, Object> initializedObjects = new Dictionary<Type, object>();

        public static object Get(Type type)
        {
            object initializedObject = null;
            ApplicationLevel level;
            level = GetClassLevel(type);
            if (!initializedObjects.ContainsKey(type))
            {
                object obj = Activator.CreateInstance(type);
                ProxyFactory factory = new ProxyFactory(obj);
                switch (level)
                {
                    case ApplicationLevel.Application:
                        initializedObject = ApplicationConfiguration.AddBusinessAdvicesToObject(factory);
                        break;
                    case ApplicationLevel.Page:
                        initializedObject = ApplicationConfiguration.AddPageAdvicesToObject(factory);
                        break;
                    default:
                        initializedObject = factory.GetProxy();
                        break;

                }
                initializedObjects.Add(type, initializedObject);

            }
            else
                initializedObject = initializedObjects[type];
            return initializedObject;
        }

        internal static ApplicationLevel GetClassLevel(Type type)
        {
            ApplicationLevel level;
           TypeInfo typeInfo = type.GetTypeInfo();
            var attrs = typeInfo.GetCustomAttributes();
            foreach (var attr in attrs)
            {
                if (attr.GetType().Name.Equals("Page"))
                {
                    level = ApplicationLevel.Page;
                    return level;
                }
                else
                     if (attr.GetType().Name.Equals("App"))
                {
                    level = ApplicationLevel.Application;
                    return level;
                }
                else
                if(attr.GetType().Name.Equals("TestFixtureAttribute"))
                {
                level=ApplicationLevel.TestFixture;
                 return level;
                }
            }
             if(isNativeLibrary(type.Name))
                return ApplicationLevel.Native;
            return ApplicationLevel.Invalid;
        }

        private static bool isNativeLibrary(string name)
        {
          foreach(string library in ExecutionInfo.NativeLibrary)
          {
              if(name.Equals(library))
              return true;
          }
          return false;

        }
    }
}
